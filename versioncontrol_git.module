<?php
// $Id: versioncontrol_git.module,v 1.21.2.4 2009/04/07 17:35:32 marvil07 Exp $
/**
 * @file
 * Git backend for Version Control API - Provides Git commit information and
 * account management as a pluggable backend.
 *
 * Copyright 2008 by Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 * Copyright 2009 by Cornelius Riemenschneider ("CorniI", http://drupal.org/user/136353)
 */

// Update methods.
define('VERSIONCONTROL_GIT_UPDATE_CRON', 0);
define('VERSIONCONTROL_GIT_UPDATE_XGIT', 1);

require_once drupal_get_path('module', 'versioncontrol_git') . '/includes/VersioncontrolGitBackend.php';
// The admin and user edit pages.
include_once(drupal_get_path('module', 'versioncontrol_git') .'/versioncontrol_git.admin.inc');
include_once(drupal_get_path('module', 'versioncontrol') .'/includes/VersioncontrolRepository.php');

/**
 * Implementation of hook_help().
 */
function versioncontrol_git_help($section, $arg) {
  $output = '';
  if ($section == 'admin/help/versioncontrol_git' || $section == 'admin/help#versioncontrol_git') {
    $output = '<p>The Git Backend can be used to retrieve and view commit information. The commit
      information can either be retreived automatically through the use of the <i>xgit</i> scripts
      or using the <i>fetch now</i> link on the project administration repository page. The logs
      are then defaultly avaliable through the <i>commitlog</i> page.</p>
      <p>Information reguarding the setup of <i>xgit</i> scripts is aviable in the <i>README.txt</i>
      located in the <i>xgit</i> directory.</p>
      <p>If you have any questions, comments, or feature requests please visit the
      <a href="http://drupal.org/project/versioncontrol_git">module page</a> and
      post your concerns in the issue quene.</p>';
  }

  return $output;
}

/**
 * Implementation of hook_versioncontrol_backends().
 */
function versioncontrol_git_versioncontrol_backends() {
  return array(
    'git' => new VersioncontrolGitBackend()
  );
}

/**
 * Implementation of hook_menu().
 */
function versioncontrol_git_menu() {
  $items = array();
  $items['admin/project/versioncontrol-repositories/clearlock/git'] = array(
    'title' => 'Clear lock',
    'page callback' => 'versioncontrol_git_clearlock_repository_callback',
    'access arguments' => array('administer version control systems'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/project/versioncontrol-repositories/update/git'] = array(
    'title' => 'Fetch log',
    'page callback' => 'versioncontrol_git_update_repository_callback',
    'access arguments' => array('administer version control systems'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_cron()
 */
function versioncontrol_git_cron() {
  // get repositories that have log fetching enabled
  $result = db_query("SELECT repo_id FROM {versioncontrol_git_repositories}
                      WHERE update_method = %d", VERSIONCONTROL_GIT_UPDATE_CRON);

  // Set timeout limit to 3600 seconds as it can take a long time to process
  // the log initially. (And hook_cron() might be called by poormanscron.)
  if (!ini_get('safe_mode')) {
    set_time_limit(3600);
  }
  while ($repo = db_fetch_object($result)) {
    $repository = VersioncontrolRepository::getRepository($repo->repo_id);
    if (isset($repository)) {
      _versioncontrol_git_update_repository($repository);
    }
  }
}

/**
 * Implementation of hook_get_selected_label_from_operation().
 */
function versioncontrol_git_get_selected_label_from_operation($operation, $target_item) {
  // TODO: implement tag support here, tags>branch?
  // better not, after looking it again current code is OK.
  // just take the first branch, dunno what else we should do here...
  // jpetso knows neither :P
  return $operation['labels'][0];
}

function _versioncontrol_git_get_branch_intersect($repository, $item1, $item2) {
  $constraints = array(
    'revisions' => array($item1->revision, $item2->revision),
    'vcs' => array('git'),
    'repo_ids' => array($repository->repo_id),
    'types' => array(VERSIONCONTROL_OPERATION_COMMIT)
  );
  $commit_ops = VersioncontrolOperation::getOperations($constraints);
  $branches1 = array();
  $branches2 = array();
  foreach ($commit_ops as $vc_op_id => $op) {
    foreach ($op['labels'] as $label) {
      if ($label['type'] === VERSIONCONTROL_OPERATION_BRANCH) {
        if ($op['revision'] == $item1['revision']) {
          $branches1[]=$label;
        }
        else if ($op['revision'] == $item2['revision']) {
          $branches2[]=$label;
        }
      }
    }
  }
  foreach ($branches1 as $key => $value) {
    if (!in_array($value, $branches2)) {
      unset($branches1[$key]);
    }
  }
  return array_pop($branches1); // We don't know any keys in $branches, so we use array_pop here. Also it'll return NULL if needed
}

/**
 * Implementation of hook_get_selected_label_from_other_item().
 */
function versioncontrol_git_get_selected_label_from_other_item($repository, $target_item, &$other_item, $other_item_tags = array()) {
  // First up, optimizations - maybe we can do without the generic
  // "label transfer" code from further down and use assumptions instead.
  // Let's assume for FakeVCS repositories that if an item wears a label, then
  // an item at another path but with the same (file-level) revision can also
  // wear that same label. That is the case with some version control systems
  // (e.g. Git, Mercurial, Bazaar) but might not be the case with others
  // (CVS for its lack of global revision identifiers, SVN for its use of
  // directory structure as tag/branch identifiers).
  if ($target_item['revision'] == $other_item['revision']) {
    return versioncontrol_get_item_selected_label($repository, $other_item);
  }

  //can be maybe optimized for speed by using the hints provided
  return _versioncontrol_git_get_branch_intersect($repository, $target_item, $other_item);
}

/**
 * Implementation of hook_account_username_suggestion().
 */
function versioncontrol_git_account_username_suggestion($repository, $user) {
  // @TODO: adjust later
  // Use the kindof standard git identifier here, it's nothing too serious.
  return $user->name ." <$user->mail>";
}

/**
 * Implementation of hook_is_account_username_valid().
 */
function versioncontrol_git_is_account_username_valid($repository, &$username) {
  // @TODO: adjust, too
  // We want to allow "prename name <email@example.org>"
  // Or just "nick <email@example.org>"
  // Or just whatever naming convention you like
  // This means, we just check for control characters and NULs here
  if (preg_match("/[\\x00-\\x1f]/", $username) == 0) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Menu callback for 'admin/project/versioncontrol-repositories/clearlock/git'
 * (expecting a $repo_id as one more path argument):
 * Clears the update lock for the specified repository
 */
function versioncontrol_git_clearlock_repository_callback($repo_id) {
  if (is_numeric($repo_id)) {
    db_query('UPDATE {versioncontrol_git_repositories}
            SET locked = 0 WHERE repo_id = %d', $repo_id);
    drupal_set_message(t('Cleared the lock for the repository.'));
  }
  drupal_goto('admin/project/versioncontrol-repositories');
}

/**
 * Menu callback for 'admin/project/versioncontrol-repositories/update/git'
 * (expecting a $repo_id as one more path argument):
 * Retrieve/validate the specified repository, fetch new commits, tags
 * and branches by invoking the git executable, output messages and
 * redirect back to the repository page.
 */
function versioncontrol_git_update_repository_callback($repo_id) {
  if (is_numeric($repo_id)) {
    $repository = VersioncontrolRepository::getRepository($repo_id);

    if (isset($repository)) {
      $update_method = $repository->git_specific['update_method'];
    }
  }
  if (isset($update_method) && $update_method == VERSIONCONTROL_GIT_UPDATE_CRON) {
    // Set timeout limit to 3600 seconds as it can take a long time
    // to process the log initially.
    if (!ini_get('safe_mode')) {
      set_time_limit(3600);
    }
    if (_versioncontrol_git_update_repository($repository)) {
      drupal_set_message(t('Fetched new log entries.'));
    }
    else {
      drupal_set_message(t('Error while fetching new log entries.'), 'error');
    }
  }
  else { // $repo_id is not a number or doesn't correlate to any repository.
    drupal_set_message(t('No such repository, did not fetch anything.'));
  }
  drupal_goto('admin/project/versioncontrol-repositories');
}

/**
 * Actually update the repository by fetching commits and other stuff
 * directly from the repository, invoking the git executable.
 *
 * @return
 *   TRUE if the logs were updated, or FALSE if fetching and updating the logs
 *   failed for whatever reason.
 */
function _versioncontrol_git_update_repository(&$repository) {
  include_once(drupal_get_path('module', 'versioncontrol_git') .'/versioncontrol_git.log.inc');
  return _versioncontrol_git_log_update_repository($repository);
}

/**
 * Implementation of hook_format_revision_identifier().
 */
function versioncontrol_git_format_revision_identifier($repository, $revision, $format = 'full') {
  switch ($format) {
    case 'short':
        // Let's return only the first 7 characters of the revision identifier,
        // like git log --abbrev-commit does by default.
        return substr($revision, 0, 7);
    case 'full':
    default:
      return $revision;
  }
}

/**
 * Delete the cache file for a given repository.
 * @param $repository
 * 	The repository to delete the cache for
 */
function _versioncontrol_git_delete_repository_cache($repository) {
  $cache = $repository['git_specific']['cache_path'];
  if (file_exists($cache)) {
    @unlink($cache);
  }
}

/**
 * Implementation of hook_repository().
 */
function versioncontrol_git_repository($op, $repository) {
  if ($op == 'delete') {
    _versioncontrol_git_delete_repository_cache($repository);
  }
}

function versioncontrol_git_disable() {
  $constraints = array(
    'vcs' => array('git')
  );
  $repos = versioncontrol_get_repositories($constraints);
  foreach ($repos as $repository) {
    _versioncontrol_git_delete_repository_cache($repository);
  }
}
